{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Bono\\\\Desktop\\\\OneDrive\\\\OneDrive\\\\Documents\\\\Documents\\\\3rd yr IT\\\\Semester2\\\\CMPG323\\\\Front-end-NexTech\\\\Front-end\\\\frontend-bananaboat\\\\src\\\\components\\\\reset-password.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\n\n// Password Reset Component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PasswordReset = () => {\n  _s();\n  const [email, setEmail] = useState('');\n\n  // Handle input change\n  const handleEmailChange = e => {\n    setEmail(e.target.value);\n  };\n\n  // Handle form submission for password reset\n  const handleSubmit = async e => {\n    e.preventDefault();\n\n    // Perform form validation (e.g., check for empty email)\n    if (!email) {\n      alert(\"Please enter your email.\");\n      return;\n    }\n    try {\n      const response = await fetch('resetPassword', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'X-CSRFToken': getCSRFToken() // Adjust based on your CSRF token implementation\n        },\n        body: JSON.stringify({\n          email\n        })\n      });\n      if (response.ok) {\n        alert('A reset code has been sent to your email.');\n        // Optionally, redirect or reset form if necessary\n      } else {\n        alert('Failed to send reset code. Please try again.');\n      }\n    } catch (error) {\n      console.error('Error during password reset:', error);\n      alert('An error occurred while sending the reset code.');\n    }\n  };\n\n  // Function to get CSRF token\n  const getCSRFToken = () => {\n    var _document$cookie$spli;\n    return (_document$cookie$spli = document.cookie.split('; ').find(item => item.startsWith('csrftoken='))) === null || _document$cookie$spli === void 0 ? void 0 : _document$cookie$spli.split('=')[1];\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: styles.container,\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      style: styles.title,\n      children: \"Password Reset\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      style: styles.form,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: styles.inputGroup,\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Email\",\n          name: \"email\",\n          value: email,\n          onChange: handleEmailChange,\n          required: true,\n          style: styles.input\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        style: styles.submitButton,\n        children: \"Get Code\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n};\n\n// Styles for the component\n_s(PasswordReset, \"qu4bovk5U4+JuhY7vxbmswqixrc=\");\n_c = PasswordReset;\nconst styles = {\n  container: {\n    maxWidth: '900px',\n    // Increased width for more horizontal space\n    margin: 'auto',\n    padding: '20px',\n    backgroundColor: '#f9f9f9',\n    borderRadius: '8px',\n    boxShadow: '0 2px 4px rgba(0,0,0,0.1)'\n  },\n  title: {\n    textAlign: 'center',\n    marginBottom: '20px'\n  },\n  form: {\n    display: 'flex',\n    flexDirection: 'column'\n  },\n  inputGroup: {\n    marginBottom: '15px' // Margin between input groups\n  },\n  input: {\n    padding: '10px',\n    borderRadius: '4px',\n    border: '1px solid #ccc',\n    width: '100%' // Full width for the input\n  },\n  submitButton: {\n    padding: '10px',\n    backgroundColor: '#4CAF50',\n    color: 'white',\n    border: 'none',\n    borderRadius: '4px',\n    cursor: 'pointer'\n  }\n};\nexport default PasswordReset;\nvar _c;\n$RefreshReg$(_c, \"PasswordReset\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","PasswordReset","_s","email","setEmail","handleEmailChange","e","target","value","handleSubmit","preventDefault","alert","response","fetch","method","headers","getCSRFToken","body","JSON","stringify","ok","error","console","_document$cookie$spli","document","cookie","split","find","item","startsWith","style","styles","container","children","title","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","form","inputGroup","type","placeholder","name","onChange","required","input","submitButton","_c","maxWidth","margin","padding","backgroundColor","borderRadius","boxShadow","textAlign","marginBottom","display","flexDirection","border","width","color","cursor","$RefreshReg$"],"sources":["C:/Users/Bono/Desktop/OneDrive/OneDrive/Documents/Documents/3rd yr IT/Semester2/CMPG323/Front-end-NexTech/Front-end/frontend-bananaboat/src/components/reset-password.js"],"sourcesContent":["import React, { useState } from 'react';\r\n\r\n// Password Reset Component\r\nconst PasswordReset = () => {\r\n  const [email, setEmail] = useState('');\r\n\r\n  // Handle input change\r\n  const handleEmailChange = (e) => {\r\n    setEmail(e.target.value);\r\n  };\r\n\r\n  // Handle form submission for password reset\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    // Perform form validation (e.g., check for empty email)\r\n    if (!email) {\r\n      alert(\"Please enter your email.\");\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const response = await fetch('resetPassword', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'X-CSRFToken': getCSRFToken(), // Adjust based on your CSRF token implementation\r\n        },\r\n        body: JSON.stringify({ email }),\r\n      });\r\n\r\n      if (response.ok) {\r\n        alert('A reset code has been sent to your email.');\r\n        // Optionally, redirect or reset form if necessary\r\n      } else {\r\n        alert('Failed to send reset code. Please try again.');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error during password reset:', error);\r\n      alert('An error occurred while sending the reset code.');\r\n    }\r\n  };\r\n\r\n  // Function to get CSRF token\r\n  const getCSRFToken = () => {\r\n    return document.cookie\r\n      .split('; ')\r\n      .find(item => item.startsWith('csrftoken='))\r\n      ?.split('=')[1];\r\n  };\r\n\r\n  return (\r\n    <div style={styles.container}>\r\n      <h1 style={styles.title}>Password Reset</h1>\r\n      <form onSubmit={handleSubmit} style={styles.form}>\r\n        <div style={styles.inputGroup}>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Email\"\r\n            name=\"email\"\r\n            value={email}\r\n            onChange={handleEmailChange}\r\n            required\r\n            style={styles.input}\r\n          />\r\n        </div>\r\n        <button type=\"submit\" style={styles.submitButton}>Get Code</button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\n// Styles for the component\r\nconst styles = {\r\n  container: {\r\n    maxWidth: '900px', // Increased width for more horizontal space\r\n    margin: 'auto',\r\n    padding: '20px',\r\n    backgroundColor: '#f9f9f9',\r\n    borderRadius: '8px',\r\n    boxShadow: '0 2px 4px rgba(0,0,0,0.1)',\r\n  },\r\n  title: {\r\n    textAlign: 'center',\r\n    marginBottom: '20px',\r\n  },\r\n  form: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n  },\r\n  inputGroup: {\r\n    marginBottom: '15px', // Margin between input groups\r\n  },\r\n  input: {\r\n    padding: '10px',\r\n    borderRadius: '4px',\r\n    border: '1px solid #ccc',\r\n    width: '100%', // Full width for the input\r\n  },\r\n  submitButton: {\r\n    padding: '10px',\r\n    backgroundColor: '#4CAF50',\r\n    color: 'white',\r\n    border: 'none',\r\n    borderRadius: '4px',\r\n    cursor: 'pointer',\r\n  },\r\n};\r\n\r\nexport default PasswordReset;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}